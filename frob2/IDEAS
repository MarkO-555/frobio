IDEAS TODO:

Memory bug in dig.
DNS Extensions corretly in dig.

Port to OS9. Level1.
Port to non-OS9.
Shared LibFrobio module?

Device Drivers:
  Wiz, UDP, TCP, Resolve
FUSE Manager/driver.
Tap into CCIO.

Telnet into OS9 Shell.
Telnet into CCIO Text. Graphics?
Terminfo for NitrOS9.

UnixLooknFeel:
  Bournish shell
  real Argv & Envp
  ULF.* commands
Rebuild NCL.
  make f.ncl.os9 (has simple errors)

Thats when I reach for my resolver!

Rename API with consistent CamelCase, separating frobio API from any Unix or other API.

IRC client.

Omnitrix (reliable UDP monster).
  -- shard memory.
  -- omni daemon.

Security:
  SSL/TLS?
  RC4? RC49?
  MD2?
  Secretmail
  Bignum lib.

/wiz/raw:
  Packets to R and W to the wiznet chip.
  r: read bytes from wiznet
  w: write bytes to wiznet
  c: send one-byte command and wait for 0.
  i: pull in from a circular buffer
  o: push out to a circular buffer.
  x: reset wiznet.
  z: wait on an outcome (set of possible results).


Compile with gcc, perhaps omit frame pointer:
  -- alias CC='/opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 -std=c99'
  -- CC -c -I.. froblib/buf.c
  -- CC -c -I..  -fomit-frame-pointer wiz/wiz5100s.c   froblib/buf.c froblib/flag.c froblib/format.c froblib/malloc.c froblib/nylib.c froblib/nystdio.c froblib/std.c
  -- CC -Wall -S -I..  -fomit-frame-pointer wiz/wiz5100s.c   froblib/buf.c froblib/flag.c froblib/format.c froblib/malloc.c froblib/nylib.c froblib/nystdio.c froblib/std.c os9/frobos9.c


------------------------------------------------
32061   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99 -fno-builtin -S -I..  zhello.c 
32062   m zhello.s
32063   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99 -fno-builtin -c -I..  zhello.c 
32064   file zhello.o
32065   m zhello.o
32066   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99 -fno-builtin -S -I..  zhello.c 
32067   m zhello.s
32068   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99 -fno-builtin  -I..  zhello.c 
32069   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=c++98 -fno-builtin  -I..  zhello.c 
32070   ln -s /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 /opt/yak/fuzix/bin/g++
32071   /opt/yak/fuzix/bin/g++ -I.. -S zhello.c 
32072   m zhello.s 
32073   vi zhello.c 
32074   /opt/yak/fuzix/bin/g++ -I.. -S zhello.c 
32075   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=c++98 -fno-builtin  -I..  '-###' zhello.c 
32076   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=c++98 -fno-builtin  -I..   zhello.c 
32077   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99 -fno-builtin  -I..   zhello.c 
32078   vi zhello.c
32079   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99 -fno-builtin  -I..   zhello.c 
32080   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99  -I..   zhello.c 
32081   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99  -I.. -v  zhello.c 
32082   /opt/yak/fuzix/libexec/gcc/m6809-unknown/4.6.4/collect2 /opt/yak/fuzix/lib/gcc/m6809-unknown/4.6.4/crt0.o -L/opt/yak/fuzix/lib/gcc/m6809-unknown/4.6.4 -L/opt/yak/fuzix/lib/gcc/m6809-unknown/4.6.4/../../../../m6809-unknown/lib /tmp/ccGwbFS3.o 
32083   file /opt/yak/fuzix/lib/gcc/m6809-unknown/4.6.4/crt0.o
32084   hd /opt/yak/fuzix/lib/gcc/m6809-unknown/4.6.4/crt0.o |head
32085   p lwobjdump /opt/yak/fuzix/lib/gcc/m6809-unknown/4.6.4/crt0.o
32086   ff /opt/yak/fuzix/lib/gcc/
32087   p ff /opt/yak/fuzix/lib/gcc/
32088   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99  -I.. -v -S  zhello.c 
32089   m zhello.s 
32090   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=c11  -I.. -v -S  zhello.c
32091   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu11  -I.. -v -S  zhello.c
32092   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu11  -I..  -S  zhello.c
32093   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99  -I.. -v -S  zhello.c
32094   vi zhello.c
32095   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99  -I.. -v -S  zhello.c
32096   cat zhello.c 
32097   vi zhello.c 
32098   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99  -I.. -v -S  zhello.c
32099   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99  -I..  -S  zhello.c
32100   cat zhello.s
32101   vi zhello.s
32102   vi zhello.c
32103   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99  -I..  -S  zhello.c
32104   n zhello.s
32105   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99  -I.. -O2 -S  zhello.c
32106   n zhello.s
32107   /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99  -I.. -Os -S  zhello.c
32108   n zhello.s
32109   history 50
32110   history 50 >> IDEAS 
------------------------------------------------
  -f"whole-program"  -f"lto"[=n]
  -f"inline-functions"
------------------------------------------------
extern int puts(const char *s);

/*
class Foo {
  public:
    void bar() {
      puts("hello world");
    }
}
*/

inline void Greet() { 
      puts("hello world");
}

int main() {
  Greet();
  asm (
    "   NOP foobar  "
  );
  unsigned int a=100, b=200, c=300;
  for (unsigned i = 0; i < a; i++) Greet();
  for (unsigned i = 0; i < b; i++) Greet();
  for (unsigned i = 0; i < c; i++) Greet();
  return 13;
}
------------------------------------------------
32145   HOW=gcc make -B x.logging.os9 
32146   ls *.s
32147   cmoc -o a.out --os9 *.s 
32148   HOW=gcc make -B x.logging.os9 
32149   ll *.c.o
32150   HOW=gcc make -B x.logging.os9 
32151   ll *.o
32152   rm *.o
32153   make clean 
32154   HOW=gcc make -B x.logging.os9 
32155   ll *.o
32156   ll *.s
32157   HOW=gcc make -B x.logging.os9 
32158   ll *.s
32159   ll *.o
32160   cmoc --os9 -o a.out *.o 
32161   cmoc -i --os9 -o a.out *.o 
32162   ls -t
32163   m a.link 
32164   m x-logging.s
32165   g mul *.s
32166   m format.s 
32167   g __ format.s
32168   m format.s 
32169   g -i ini *.s
32170   p lwobjdump format.o
32171   mkdir Z11
32172   cp *.s *.o Z11 
32173   HOW=gcc make -B x.logging.os9 
32174   ll format.s Z11/format.s
32175   vimdiff format.s Z11/format.s 
32176   p lwobjdump format.o
32177   vi crt_gcc.asm 
32178   fg
32179   cmoc -i --os9 -nodefaultlibs -o a.out *.o 
32180   fg
32181   cmoc -i --os9 -nodefaultlibs -o a.out *.o crt_gcc.asm 
32182   cmoc -i --raw -nodefaultlibs -o a.out *.o crt_gcc.asm 
32183   cmoc -i --raw --void-target -nodefaultlibs -o a.out *.o crt_gcc.asm 
32184   ls
32185   m x-logging.s
32186   cmoc -i --raw --void-target -nodefaultlibs -o a.out *.o crt_gcc.asm 
32187   lwlink-orig --format=raw --output=a.out --script=a.link --map=a.map buf.o crt_gcc.o flag.o format.o frobos9.o malloc.o nylib.o nystdio.o stack300.o std.o wiz5100s.o x-logging.o 
32188   n a.link
32189   vi a.link
32190   lwlink-orig --format=raw --output=a.out --script=a.link --map=a.map buf.o crt_gcc.o flag.o format.o frobos9.o malloc.o nylib.o nystdio.o stack300.o std.o wiz5100s.o x-logging.o 
32191   m x-logging.o 
32192   m x-logging.s
32193   history 50 
32194   history 50 >> IDEAS 
------------------------------------------------
-mint8 works.
-mno-reg-args works.
-m6309 accepted, no change.
-mdret works (return in D, not X)

------------------------------------------------
This seems to have worked:

/opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99 -fno-builtin -funsigned-char -funsigned-bitfields -Os -S -fwhole-program  -fpic zhello.c
alias ASM="lwasm --obj --pragma=undefextern --pragma=cescapes --pragma=importundefexport --pragma=newsource"
ASM -o whole-pic.o -lwhole-pic.list  whole-pic.asm

Not sure why the combination of -f'whole-program' and -f'pic' did not work last night.
------------------------------------------------
https://raw.githubusercontent.com/haikuports/haikuports/master/dev-embedded/gcc6809/patches/gcc6809-4.6.4.patchset
March 2019 patch set.
https://github.com/haikuports/haikuports/tree/master/dev-embedded/gcc6809
------------------------------------------------
https://gcc.gnu.org/onlinedocs/gcc-4.6.4/gccint/
------------------------------------------------
Wednesday:
   * Rename UDP/FrobNet camel style.
   * use prob in UDP/FrobNet
   * Compile for RSB!?
   * Monster Command
   * Monster Shell
   * All flags 1 word: --flag=1
   * Longer timeout for Socketless (0.5s * (1+3) = 2.0s).
   * Make UDP timeout with NotYet.



------------------------------------------------
/sy/frobio/frob2$ cat z2.c froblib/*.c  decb/*.c  > z2a.c && /opt/yak/fuzix/bin/m6809-unknown-gcc-4.6.4 --std=gnu99 -funsigned-char -funsigned-bitfields -S -I.. -Os -fwhole-program  z2a.c  && lwasm --obj --pragma=undefextern --pragma=cescapes --pragma=importundefexport --pragma=newsource --list=z2a.list --map=z2a.map  -I.. -o z2a.o z2a.s  && lwlink --format=decb --entry=_main -o z2z.bin --map=z2z.map -s decb.script z2a.o -L/opt/yak/fuzix/lib/gcc/m6809-unknown/4.6.4/ -lgcc && scp z2z.bin root@yak.net:/tmp/
In file included from z2a.c:1:0:
../frob2/froblib.h:67:6: warning: conflicting types for built-in function 'strcat' [enabled by default]
../frob2/froblib.h:79:6: warning: conflicting types for built-in function 'printf' [enabled by default]
../frob2/froblib.h:80:6: warning: conflicting types for built-in function 'putchar' [enabled by default]
+ lwasm-orig --obj --pragma=undefextern --pragma=cescapes --pragma=importundefexport --pragma=newsource --list=z2a.list --map=z2a.map -I.. -o z2a.o z2a.s -l.list
+ lwlink-orig --format=decb --entry=_main -o z2z.bin --map=z2z.map -s decb.script z2a.o -L/opt/yak/fuzix/lib/gcc/m6809-unknown/4.6.4/ -lgcc
z2z.bin                                                                                                                                                     100% 7710   140.6KB/s   00:00
/sy/frobio/frob2$
------------------------------------------------

Borne Shell Ideas:
  Postpone ENV?
  Postpone BG?
  Postpone $* $1 $2 $3 shift
  Postpone case
  Postpone read
  Postpone Subshells
  set only -e -x etc.

Subshells need
  * Vars
  * Env
  * Redirects
  * Flag modes -e -x etc.

echo "Hello; $x!"
  -- Use "" and '' to build words, then shed.
  -- Then just join on spaces for params to exec
  -- Commands that want filenames get them.
  -- the echo command gets all but quotes
  Broken: Empty String as an argument.
  However: if Dash Options require = (e.g. -color=red)
    (defaulting to 1 if no =) then empty option
    is available: -prefix=

Unix Look And Feel Capabilities:
  -- Edition Number comes after name.
  -- Follow that with $ABCF
  -- Followed by lowercase letters "a"=argv "e"=env
  -- if needed, lowercase letter could be followed by decimal digits.
               ( like for sizes of Capabilities )
  -- followed by $00


==============================================
git push -u origin bufferless
==============================================

m6809_override_options() in m6809.c

```
int goose;
__attribute__((section("hasxxx"))) int goosexxx;

int gander;
__attribute__((section("hasxxx"))) int ganderxxx;
```

YIELDS

```
	.area .bss
	.globl	_goose
_goose:	.blkb	2
	.globl _goosexxx
	.area	hasxxx
_goosexxx:
	.word	0	;skip space 2
	.area .bss
	.globl	_gander
_gander:	.blkb	2
	.globl _ganderxxx
	.area	hasxxx
_ganderxxx:
	.word	0	;skip space 2
```


-- Grep section_op in m6809.c

gcc6809 -S -I.. -std=gnu99 -nostdlib -dP -mcode-section=NANDO  yadd.c
```
;;; gcc for m6809 : Nov 22 2019 00:09:58
;;; 4.6.4 (gcc6809lw pl6)
;;; ABI version 1
;;; -mint16
        .module yadd.c
        .area NANDO
        .globl _hexdigit
_hexdigit:
; (insn/f 36 4 37 (parallel [
```


config/h8300/h8300.md uses SYMBOL_REF_FLAG in .md file
```
(define_insn "call"
  [(call (match_operand:QI 0 "call_insn_operand" "or")
	 (match_operand:HI 1 "general_operand" "g"))]
  ""
  "*
{
  if (GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF
      && SYMBOL_REF_FLAG (XEXP (operands[0], 0)))
    return \"jsr\\t@%0:8\";
  else
    return \"jsr\\t%0\";
}"
  [(set_attr "type" "call")
   (set (attr "length")
	(if_then_else (match_operand:QI 0 "small_call_insn_operand" "")
		      (const_int 2)
		      (const_int 4)))])
```

rtl.h
```
/* Subsequent bits are available for the target to use.  */
#define SYMBOL_FLAG_MACH_DEP_SHIFT      9
#define SYMBOL_FLAG_MACH_DEP            (1 << SYMBOL_FLAG_MACH_DEP_SHIFT)
```

-------------------------------

Assembly Language Programming for the Color Computer, Tepolt, 1985:

p215: POLCAT   [$A000]
Modifies: A & CC.
Key pressed: Z=0, A=ascii
No key: Z=1, A=0

CHROUT     [$A002]
    Displays ascii A reg
    DP=0

p213: DISPL   $B99C
In: DP=0 X=string
  string starts with " and ends with " (quotes not displayed)
  $0D causes CR/LF.

CLSCRN   $A928
   clears screen; display pointer set to $0400.

Extended Color Basic Memory Usage
    0000    Internal
    0400    Text Screen
    0600    Graphics Screen
    0601+(N*600)   Basic Statements start   [0019] points to start
            Numeric Variables               [001b] points to start

    Relativey Safe Gap 2600 to 3E00 (7E00)

ending:
    3ed0 (7ed0)  Unused
    3f36 (7f36)  S Stack ^   ( ~ 100 bytes ) 
    3fff (7fff)  String Variables (200 bytes)

CLEAR 200, &H3000    ( reserve 200 string, stop ram at 3000 )

CFNBUF  01D1  RMB 9    ; cassette filename
CASBUF  01DA  RMB 256  ; cassette buffer
LINHDR  01DA  RMB 2    ; line input buffer header
LINBUF  02DC  RMB LBUFMX+1  ; basic line input buffer

VIDRAM  0400  RMB 200

;;;; DISK BASIC ONLY:  otherwise Graphics screens?
DBUF0   0600  RMB 100   ; i/o buffer #0
DBUF1   0700  RMB 100   ; i/o buffer #1
FATBL0   0800  RMB FATLEN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ctrl=189 up=94=^ left=8 right=9 down=10 alt=64=@  clear=12
shift-ctrl=1 s-up=95=_ s-left=21 s-right=93=] sdown=91 s-alt=19  s-@=19 shift-clr=92=\
f1=103=g f2=4   shift-f1=52=4 shift-f2=214    s-enter=enter=13  s-break=break=3

;;;;;;;;;;;;;;;;;;;;

How to load flash rom in CocoSDC:

LOADM "NETBOOT.DEC"
KILL MEM @4
WRITE MEM @4, &H2600, &HC000, 8190
RUN @4

;;;;;;;;;;;;;;;;

How can I avoid the $63 bytes of crt.ecb_o ?

This is my script:
$ cat -n netboot.link.PLAIN
     1	define basesympat s_%s
     2	define lensympat l_%s
     3	section start load 2600
     4	section code
     5	section rodata
     6	section bss,bss
     7	entry program_start

lwlink-orig --map=netboot.coco.map --format=raw --output=netboot.coco --script=netboot.link.PLAIN  --map=netboot.map -L/opt/yak/cmoc/share/cmoc/lib -L/tmp -lcmoc-crt-zap -lcmoc-std-ecb /opt/yak/cmoc/share/cmoc/lib/float-ctor.ecb_o -lcmoc-float-ecb preboot.o netboot.o

I can remove the float:

lwlink-orig --map=netboot.coco.map --format=raw --output=netboot.coco --script=netboot.link.PLAIN  --map=netboot.map -L/opt/yak/cmoc/share/cmoc/lib -L/tmp -lcmoc-crt-zap -lcmoc-std-ecb  preboot.o netboot.o

/tmp/libcmoc-crt-zap.a is libcmoc-crt-ecb.a with crt.ecb_o removed.

Otherwise crt.ecb_o gets included, and cannot find program_end or INITGL.
